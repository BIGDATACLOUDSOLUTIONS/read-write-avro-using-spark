/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Invoices extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1311373455493070760L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Invoices\",\"namespace\":\"com.example\",\"fields\":[{\"name\":\"InvoiceNumber\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"CreatedTime\",\"type\":\"long\"},{\"name\":\"StoreID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"PosID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"CashierID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"CustomerType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"CustomerCardNo\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"TotalAmount\",\"type\":\"double\"},{\"name\":\"NumberOfItems\",\"type\":\"long\"},{\"name\":\"PaymentMethod\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"TaxableAmount\",\"type\":\"double\"},{\"name\":\"CGST\",\"type\":\"double\"},{\"name\":\"SGST\",\"type\":\"double\"},{\"name\":\"CESS\",\"type\":\"double\"},{\"name\":\"DeliveryType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"InvoiceLineItems\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"InvoiceLineItems\",\"fields\":[{\"name\":\"ItemCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ItemDescription\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ItemPrice\",\"type\":\"double\"},{\"name\":\"ItemQty\",\"type\":\"long\"},{\"name\":\"TotalValue\",\"type\":\"double\"}]}}}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Invoices> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Invoices> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Invoices> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Invoices> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Invoices> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Invoices to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Invoices from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Invoices instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Invoices fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String InvoiceNumber;
  private long CreatedTime;
  private java.lang.String StoreID;
  private java.lang.String PosID;
  private java.lang.String CashierID;
  private java.lang.String CustomerType;
  private java.lang.String CustomerCardNo;
  private double TotalAmount;
  private long NumberOfItems;
  private java.lang.String PaymentMethod;
  private double TaxableAmount;
  private double CGST;
  private double SGST;
  private double CESS;
  private java.lang.String DeliveryType;
  private java.util.List<com.example.InvoiceLineItems> InvoiceLineItems;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Invoices() {}

  /**
   * All-args constructor.
   * @param InvoiceNumber The new value for InvoiceNumber
   * @param CreatedTime The new value for CreatedTime
   * @param StoreID The new value for StoreID
   * @param PosID The new value for PosID
   * @param CashierID The new value for CashierID
   * @param CustomerType The new value for CustomerType
   * @param CustomerCardNo The new value for CustomerCardNo
   * @param TotalAmount The new value for TotalAmount
   * @param NumberOfItems The new value for NumberOfItems
   * @param PaymentMethod The new value for PaymentMethod
   * @param TaxableAmount The new value for TaxableAmount
   * @param CGST The new value for CGST
   * @param SGST The new value for SGST
   * @param CESS The new value for CESS
   * @param DeliveryType The new value for DeliveryType
   * @param InvoiceLineItems The new value for InvoiceLineItems
   */
  public Invoices(java.lang.String InvoiceNumber, java.lang.Long CreatedTime, java.lang.String StoreID, java.lang.String PosID, java.lang.String CashierID, java.lang.String CustomerType, java.lang.String CustomerCardNo, java.lang.Double TotalAmount, java.lang.Long NumberOfItems, java.lang.String PaymentMethod, java.lang.Double TaxableAmount, java.lang.Double CGST, java.lang.Double SGST, java.lang.Double CESS, java.lang.String DeliveryType, java.util.List<com.example.InvoiceLineItems> InvoiceLineItems) {
    this.InvoiceNumber = InvoiceNumber;
    this.CreatedTime = CreatedTime;
    this.StoreID = StoreID;
    this.PosID = PosID;
    this.CashierID = CashierID;
    this.CustomerType = CustomerType;
    this.CustomerCardNo = CustomerCardNo;
    this.TotalAmount = TotalAmount;
    this.NumberOfItems = NumberOfItems;
    this.PaymentMethod = PaymentMethod;
    this.TaxableAmount = TaxableAmount;
    this.CGST = CGST;
    this.SGST = SGST;
    this.CESS = CESS;
    this.DeliveryType = DeliveryType;
    this.InvoiceLineItems = InvoiceLineItems;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return InvoiceNumber;
    case 1: return CreatedTime;
    case 2: return StoreID;
    case 3: return PosID;
    case 4: return CashierID;
    case 5: return CustomerType;
    case 6: return CustomerCardNo;
    case 7: return TotalAmount;
    case 8: return NumberOfItems;
    case 9: return PaymentMethod;
    case 10: return TaxableAmount;
    case 11: return CGST;
    case 12: return SGST;
    case 13: return CESS;
    case 14: return DeliveryType;
    case 15: return InvoiceLineItems;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: InvoiceNumber = value$ != null ? value$.toString() : null; break;
    case 1: CreatedTime = (java.lang.Long)value$; break;
    case 2: StoreID = value$ != null ? value$.toString() : null; break;
    case 3: PosID = value$ != null ? value$.toString() : null; break;
    case 4: CashierID = value$ != null ? value$.toString() : null; break;
    case 5: CustomerType = value$ != null ? value$.toString() : null; break;
    case 6: CustomerCardNo = value$ != null ? value$.toString() : null; break;
    case 7: TotalAmount = (java.lang.Double)value$; break;
    case 8: NumberOfItems = (java.lang.Long)value$; break;
    case 9: PaymentMethod = value$ != null ? value$.toString() : null; break;
    case 10: TaxableAmount = (java.lang.Double)value$; break;
    case 11: CGST = (java.lang.Double)value$; break;
    case 12: SGST = (java.lang.Double)value$; break;
    case 13: CESS = (java.lang.Double)value$; break;
    case 14: DeliveryType = value$ != null ? value$.toString() : null; break;
    case 15: InvoiceLineItems = (java.util.List<com.example.InvoiceLineItems>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'InvoiceNumber' field.
   * @return The value of the 'InvoiceNumber' field.
   */
  public java.lang.String getInvoiceNumber() {
    return InvoiceNumber;
  }



  /**
   * Gets the value of the 'CreatedTime' field.
   * @return The value of the 'CreatedTime' field.
   */
  public long getCreatedTime() {
    return CreatedTime;
  }



  /**
   * Gets the value of the 'StoreID' field.
   * @return The value of the 'StoreID' field.
   */
  public java.lang.String getStoreID() {
    return StoreID;
  }



  /**
   * Gets the value of the 'PosID' field.
   * @return The value of the 'PosID' field.
   */
  public java.lang.String getPosID() {
    return PosID;
  }



  /**
   * Gets the value of the 'CashierID' field.
   * @return The value of the 'CashierID' field.
   */
  public java.lang.String getCashierID() {
    return CashierID;
  }



  /**
   * Gets the value of the 'CustomerType' field.
   * @return The value of the 'CustomerType' field.
   */
  public java.lang.String getCustomerType() {
    return CustomerType;
  }



  /**
   * Gets the value of the 'CustomerCardNo' field.
   * @return The value of the 'CustomerCardNo' field.
   */
  public java.lang.String getCustomerCardNo() {
    return CustomerCardNo;
  }



  /**
   * Gets the value of the 'TotalAmount' field.
   * @return The value of the 'TotalAmount' field.
   */
  public double getTotalAmount() {
    return TotalAmount;
  }



  /**
   * Gets the value of the 'NumberOfItems' field.
   * @return The value of the 'NumberOfItems' field.
   */
  public long getNumberOfItems() {
    return NumberOfItems;
  }



  /**
   * Gets the value of the 'PaymentMethod' field.
   * @return The value of the 'PaymentMethod' field.
   */
  public java.lang.String getPaymentMethod() {
    return PaymentMethod;
  }



  /**
   * Gets the value of the 'TaxableAmount' field.
   * @return The value of the 'TaxableAmount' field.
   */
  public double getTaxableAmount() {
    return TaxableAmount;
  }



  /**
   * Gets the value of the 'CGST' field.
   * @return The value of the 'CGST' field.
   */
  public double getCGST() {
    return CGST;
  }



  /**
   * Gets the value of the 'SGST' field.
   * @return The value of the 'SGST' field.
   */
  public double getSGST() {
    return SGST;
  }



  /**
   * Gets the value of the 'CESS' field.
   * @return The value of the 'CESS' field.
   */
  public double getCESS() {
    return CESS;
  }



  /**
   * Gets the value of the 'DeliveryType' field.
   * @return The value of the 'DeliveryType' field.
   */
  public java.lang.String getDeliveryType() {
    return DeliveryType;
  }



  /**
   * Gets the value of the 'InvoiceLineItems' field.
   * @return The value of the 'InvoiceLineItems' field.
   */
  public java.util.List<com.example.InvoiceLineItems> getInvoiceLineItems() {
    return InvoiceLineItems;
  }



  /**
   * Creates a new Invoices RecordBuilder.
   * @return A new Invoices RecordBuilder
   */
  public static com.example.Invoices.Builder newBuilder() {
    return new com.example.Invoices.Builder();
  }

  /**
   * Creates a new Invoices RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Invoices RecordBuilder
   */
  public static com.example.Invoices.Builder newBuilder(com.example.Invoices.Builder other) {
    if (other == null) {
      return new com.example.Invoices.Builder();
    } else {
      return new com.example.Invoices.Builder(other);
    }
  }

  /**
   * Creates a new Invoices RecordBuilder by copying an existing Invoices instance.
   * @param other The existing instance to copy.
   * @return A new Invoices RecordBuilder
   */
  public static com.example.Invoices.Builder newBuilder(com.example.Invoices other) {
    if (other == null) {
      return new com.example.Invoices.Builder();
    } else {
      return new com.example.Invoices.Builder(other);
    }
  }

  /**
   * RecordBuilder for Invoices instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Invoices>
    implements org.apache.avro.data.RecordBuilder<Invoices> {

    private java.lang.String InvoiceNumber;
    private long CreatedTime;
    private java.lang.String StoreID;
    private java.lang.String PosID;
    private java.lang.String CashierID;
    private java.lang.String CustomerType;
    private java.lang.String CustomerCardNo;
    private double TotalAmount;
    private long NumberOfItems;
    private java.lang.String PaymentMethod;
    private double TaxableAmount;
    private double CGST;
    private double SGST;
    private double CESS;
    private java.lang.String DeliveryType;
    private java.util.List<com.example.InvoiceLineItems> InvoiceLineItems;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.Invoices.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.InvoiceNumber)) {
        this.InvoiceNumber = data().deepCopy(fields()[0].schema(), other.InvoiceNumber);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.CreatedTime)) {
        this.CreatedTime = data().deepCopy(fields()[1].schema(), other.CreatedTime);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.StoreID)) {
        this.StoreID = data().deepCopy(fields()[2].schema(), other.StoreID);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.PosID)) {
        this.PosID = data().deepCopy(fields()[3].schema(), other.PosID);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.CashierID)) {
        this.CashierID = data().deepCopy(fields()[4].schema(), other.CashierID);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.CustomerType)) {
        this.CustomerType = data().deepCopy(fields()[5].schema(), other.CustomerType);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.CustomerCardNo)) {
        this.CustomerCardNo = data().deepCopy(fields()[6].schema(), other.CustomerCardNo);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.TotalAmount)) {
        this.TotalAmount = data().deepCopy(fields()[7].schema(), other.TotalAmount);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.NumberOfItems)) {
        this.NumberOfItems = data().deepCopy(fields()[8].schema(), other.NumberOfItems);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.PaymentMethod)) {
        this.PaymentMethod = data().deepCopy(fields()[9].schema(), other.PaymentMethod);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.TaxableAmount)) {
        this.TaxableAmount = data().deepCopy(fields()[10].schema(), other.TaxableAmount);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.CGST)) {
        this.CGST = data().deepCopy(fields()[11].schema(), other.CGST);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.SGST)) {
        this.SGST = data().deepCopy(fields()[12].schema(), other.SGST);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.CESS)) {
        this.CESS = data().deepCopy(fields()[13].schema(), other.CESS);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.DeliveryType)) {
        this.DeliveryType = data().deepCopy(fields()[14].schema(), other.DeliveryType);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.InvoiceLineItems)) {
        this.InvoiceLineItems = data().deepCopy(fields()[15].schema(), other.InvoiceLineItems);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
    }

    /**
     * Creates a Builder by copying an existing Invoices instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.Invoices other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.InvoiceNumber)) {
        this.InvoiceNumber = data().deepCopy(fields()[0].schema(), other.InvoiceNumber);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.CreatedTime)) {
        this.CreatedTime = data().deepCopy(fields()[1].schema(), other.CreatedTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.StoreID)) {
        this.StoreID = data().deepCopy(fields()[2].schema(), other.StoreID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.PosID)) {
        this.PosID = data().deepCopy(fields()[3].schema(), other.PosID);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.CashierID)) {
        this.CashierID = data().deepCopy(fields()[4].schema(), other.CashierID);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.CustomerType)) {
        this.CustomerType = data().deepCopy(fields()[5].schema(), other.CustomerType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.CustomerCardNo)) {
        this.CustomerCardNo = data().deepCopy(fields()[6].schema(), other.CustomerCardNo);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.TotalAmount)) {
        this.TotalAmount = data().deepCopy(fields()[7].schema(), other.TotalAmount);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.NumberOfItems)) {
        this.NumberOfItems = data().deepCopy(fields()[8].schema(), other.NumberOfItems);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.PaymentMethod)) {
        this.PaymentMethod = data().deepCopy(fields()[9].schema(), other.PaymentMethod);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.TaxableAmount)) {
        this.TaxableAmount = data().deepCopy(fields()[10].schema(), other.TaxableAmount);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.CGST)) {
        this.CGST = data().deepCopy(fields()[11].schema(), other.CGST);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.SGST)) {
        this.SGST = data().deepCopy(fields()[12].schema(), other.SGST);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.CESS)) {
        this.CESS = data().deepCopy(fields()[13].schema(), other.CESS);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.DeliveryType)) {
        this.DeliveryType = data().deepCopy(fields()[14].schema(), other.DeliveryType);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.InvoiceLineItems)) {
        this.InvoiceLineItems = data().deepCopy(fields()[15].schema(), other.InvoiceLineItems);
        fieldSetFlags()[15] = true;
      }
    }

    /**
      * Gets the value of the 'InvoiceNumber' field.
      * @return The value.
      */
    public java.lang.String getInvoiceNumber() {
      return InvoiceNumber;
    }


    /**
      * Sets the value of the 'InvoiceNumber' field.
      * @param value The value of 'InvoiceNumber'.
      * @return This builder.
      */
    public com.example.Invoices.Builder setInvoiceNumber(java.lang.String value) {
      validate(fields()[0], value);
      this.InvoiceNumber = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'InvoiceNumber' field has been set.
      * @return True if the 'InvoiceNumber' field has been set, false otherwise.
      */
    public boolean hasInvoiceNumber() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'InvoiceNumber' field.
      * @return This builder.
      */
    public com.example.Invoices.Builder clearInvoiceNumber() {
      InvoiceNumber = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'CreatedTime' field.
      * @return The value.
      */
    public long getCreatedTime() {
      return CreatedTime;
    }


    /**
      * Sets the value of the 'CreatedTime' field.
      * @param value The value of 'CreatedTime'.
      * @return This builder.
      */
    public com.example.Invoices.Builder setCreatedTime(long value) {
      validate(fields()[1], value);
      this.CreatedTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'CreatedTime' field has been set.
      * @return True if the 'CreatedTime' field has been set, false otherwise.
      */
    public boolean hasCreatedTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'CreatedTime' field.
      * @return This builder.
      */
    public com.example.Invoices.Builder clearCreatedTime() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'StoreID' field.
      * @return The value.
      */
    public java.lang.String getStoreID() {
      return StoreID;
    }


    /**
      * Sets the value of the 'StoreID' field.
      * @param value The value of 'StoreID'.
      * @return This builder.
      */
    public com.example.Invoices.Builder setStoreID(java.lang.String value) {
      validate(fields()[2], value);
      this.StoreID = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'StoreID' field has been set.
      * @return True if the 'StoreID' field has been set, false otherwise.
      */
    public boolean hasStoreID() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'StoreID' field.
      * @return This builder.
      */
    public com.example.Invoices.Builder clearStoreID() {
      StoreID = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'PosID' field.
      * @return The value.
      */
    public java.lang.String getPosID() {
      return PosID;
    }


    /**
      * Sets the value of the 'PosID' field.
      * @param value The value of 'PosID'.
      * @return This builder.
      */
    public com.example.Invoices.Builder setPosID(java.lang.String value) {
      validate(fields()[3], value);
      this.PosID = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'PosID' field has been set.
      * @return True if the 'PosID' field has been set, false otherwise.
      */
    public boolean hasPosID() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'PosID' field.
      * @return This builder.
      */
    public com.example.Invoices.Builder clearPosID() {
      PosID = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'CashierID' field.
      * @return The value.
      */
    public java.lang.String getCashierID() {
      return CashierID;
    }


    /**
      * Sets the value of the 'CashierID' field.
      * @param value The value of 'CashierID'.
      * @return This builder.
      */
    public com.example.Invoices.Builder setCashierID(java.lang.String value) {
      validate(fields()[4], value);
      this.CashierID = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'CashierID' field has been set.
      * @return True if the 'CashierID' field has been set, false otherwise.
      */
    public boolean hasCashierID() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'CashierID' field.
      * @return This builder.
      */
    public com.example.Invoices.Builder clearCashierID() {
      CashierID = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'CustomerType' field.
      * @return The value.
      */
    public java.lang.String getCustomerType() {
      return CustomerType;
    }


    /**
      * Sets the value of the 'CustomerType' field.
      * @param value The value of 'CustomerType'.
      * @return This builder.
      */
    public com.example.Invoices.Builder setCustomerType(java.lang.String value) {
      validate(fields()[5], value);
      this.CustomerType = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'CustomerType' field has been set.
      * @return True if the 'CustomerType' field has been set, false otherwise.
      */
    public boolean hasCustomerType() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'CustomerType' field.
      * @return This builder.
      */
    public com.example.Invoices.Builder clearCustomerType() {
      CustomerType = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'CustomerCardNo' field.
      * @return The value.
      */
    public java.lang.String getCustomerCardNo() {
      return CustomerCardNo;
    }


    /**
      * Sets the value of the 'CustomerCardNo' field.
      * @param value The value of 'CustomerCardNo'.
      * @return This builder.
      */
    public com.example.Invoices.Builder setCustomerCardNo(java.lang.String value) {
      validate(fields()[6], value);
      this.CustomerCardNo = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'CustomerCardNo' field has been set.
      * @return True if the 'CustomerCardNo' field has been set, false otherwise.
      */
    public boolean hasCustomerCardNo() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'CustomerCardNo' field.
      * @return This builder.
      */
    public com.example.Invoices.Builder clearCustomerCardNo() {
      CustomerCardNo = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'TotalAmount' field.
      * @return The value.
      */
    public double getTotalAmount() {
      return TotalAmount;
    }


    /**
      * Sets the value of the 'TotalAmount' field.
      * @param value The value of 'TotalAmount'.
      * @return This builder.
      */
    public com.example.Invoices.Builder setTotalAmount(double value) {
      validate(fields()[7], value);
      this.TotalAmount = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'TotalAmount' field has been set.
      * @return True if the 'TotalAmount' field has been set, false otherwise.
      */
    public boolean hasTotalAmount() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'TotalAmount' field.
      * @return This builder.
      */
    public com.example.Invoices.Builder clearTotalAmount() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'NumberOfItems' field.
      * @return The value.
      */
    public long getNumberOfItems() {
      return NumberOfItems;
    }


    /**
      * Sets the value of the 'NumberOfItems' field.
      * @param value The value of 'NumberOfItems'.
      * @return This builder.
      */
    public com.example.Invoices.Builder setNumberOfItems(long value) {
      validate(fields()[8], value);
      this.NumberOfItems = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'NumberOfItems' field has been set.
      * @return True if the 'NumberOfItems' field has been set, false otherwise.
      */
    public boolean hasNumberOfItems() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'NumberOfItems' field.
      * @return This builder.
      */
    public com.example.Invoices.Builder clearNumberOfItems() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'PaymentMethod' field.
      * @return The value.
      */
    public java.lang.String getPaymentMethod() {
      return PaymentMethod;
    }


    /**
      * Sets the value of the 'PaymentMethod' field.
      * @param value The value of 'PaymentMethod'.
      * @return This builder.
      */
    public com.example.Invoices.Builder setPaymentMethod(java.lang.String value) {
      validate(fields()[9], value);
      this.PaymentMethod = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'PaymentMethod' field has been set.
      * @return True if the 'PaymentMethod' field has been set, false otherwise.
      */
    public boolean hasPaymentMethod() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'PaymentMethod' field.
      * @return This builder.
      */
    public com.example.Invoices.Builder clearPaymentMethod() {
      PaymentMethod = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'TaxableAmount' field.
      * @return The value.
      */
    public double getTaxableAmount() {
      return TaxableAmount;
    }


    /**
      * Sets the value of the 'TaxableAmount' field.
      * @param value The value of 'TaxableAmount'.
      * @return This builder.
      */
    public com.example.Invoices.Builder setTaxableAmount(double value) {
      validate(fields()[10], value);
      this.TaxableAmount = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'TaxableAmount' field has been set.
      * @return True if the 'TaxableAmount' field has been set, false otherwise.
      */
    public boolean hasTaxableAmount() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'TaxableAmount' field.
      * @return This builder.
      */
    public com.example.Invoices.Builder clearTaxableAmount() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'CGST' field.
      * @return The value.
      */
    public double getCGST() {
      return CGST;
    }


    /**
      * Sets the value of the 'CGST' field.
      * @param value The value of 'CGST'.
      * @return This builder.
      */
    public com.example.Invoices.Builder setCGST(double value) {
      validate(fields()[11], value);
      this.CGST = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'CGST' field has been set.
      * @return True if the 'CGST' field has been set, false otherwise.
      */
    public boolean hasCGST() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'CGST' field.
      * @return This builder.
      */
    public com.example.Invoices.Builder clearCGST() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'SGST' field.
      * @return The value.
      */
    public double getSGST() {
      return SGST;
    }


    /**
      * Sets the value of the 'SGST' field.
      * @param value The value of 'SGST'.
      * @return This builder.
      */
    public com.example.Invoices.Builder setSGST(double value) {
      validate(fields()[12], value);
      this.SGST = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'SGST' field has been set.
      * @return True if the 'SGST' field has been set, false otherwise.
      */
    public boolean hasSGST() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'SGST' field.
      * @return This builder.
      */
    public com.example.Invoices.Builder clearSGST() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'CESS' field.
      * @return The value.
      */
    public double getCESS() {
      return CESS;
    }


    /**
      * Sets the value of the 'CESS' field.
      * @param value The value of 'CESS'.
      * @return This builder.
      */
    public com.example.Invoices.Builder setCESS(double value) {
      validate(fields()[13], value);
      this.CESS = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'CESS' field has been set.
      * @return True if the 'CESS' field has been set, false otherwise.
      */
    public boolean hasCESS() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'CESS' field.
      * @return This builder.
      */
    public com.example.Invoices.Builder clearCESS() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'DeliveryType' field.
      * @return The value.
      */
    public java.lang.String getDeliveryType() {
      return DeliveryType;
    }


    /**
      * Sets the value of the 'DeliveryType' field.
      * @param value The value of 'DeliveryType'.
      * @return This builder.
      */
    public com.example.Invoices.Builder setDeliveryType(java.lang.String value) {
      validate(fields()[14], value);
      this.DeliveryType = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'DeliveryType' field has been set.
      * @return True if the 'DeliveryType' field has been set, false otherwise.
      */
    public boolean hasDeliveryType() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'DeliveryType' field.
      * @return This builder.
      */
    public com.example.Invoices.Builder clearDeliveryType() {
      DeliveryType = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'InvoiceLineItems' field.
      * @return The value.
      */
    public java.util.List<com.example.InvoiceLineItems> getInvoiceLineItems() {
      return InvoiceLineItems;
    }


    /**
      * Sets the value of the 'InvoiceLineItems' field.
      * @param value The value of 'InvoiceLineItems'.
      * @return This builder.
      */
    public com.example.Invoices.Builder setInvoiceLineItems(java.util.List<com.example.InvoiceLineItems> value) {
      validate(fields()[15], value);
      this.InvoiceLineItems = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'InvoiceLineItems' field has been set.
      * @return True if the 'InvoiceLineItems' field has been set, false otherwise.
      */
    public boolean hasInvoiceLineItems() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'InvoiceLineItems' field.
      * @return This builder.
      */
    public com.example.Invoices.Builder clearInvoiceLineItems() {
      InvoiceLineItems = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Invoices build() {
      try {
        Invoices record = new Invoices();
        record.InvoiceNumber = fieldSetFlags()[0] ? this.InvoiceNumber : (java.lang.String) defaultValue(fields()[0]);
        record.CreatedTime = fieldSetFlags()[1] ? this.CreatedTime : (java.lang.Long) defaultValue(fields()[1]);
        record.StoreID = fieldSetFlags()[2] ? this.StoreID : (java.lang.String) defaultValue(fields()[2]);
        record.PosID = fieldSetFlags()[3] ? this.PosID : (java.lang.String) defaultValue(fields()[3]);
        record.CashierID = fieldSetFlags()[4] ? this.CashierID : (java.lang.String) defaultValue(fields()[4]);
        record.CustomerType = fieldSetFlags()[5] ? this.CustomerType : (java.lang.String) defaultValue(fields()[5]);
        record.CustomerCardNo = fieldSetFlags()[6] ? this.CustomerCardNo : (java.lang.String) defaultValue(fields()[6]);
        record.TotalAmount = fieldSetFlags()[7] ? this.TotalAmount : (java.lang.Double) defaultValue(fields()[7]);
        record.NumberOfItems = fieldSetFlags()[8] ? this.NumberOfItems : (java.lang.Long) defaultValue(fields()[8]);
        record.PaymentMethod = fieldSetFlags()[9] ? this.PaymentMethod : (java.lang.String) defaultValue(fields()[9]);
        record.TaxableAmount = fieldSetFlags()[10] ? this.TaxableAmount : (java.lang.Double) defaultValue(fields()[10]);
        record.CGST = fieldSetFlags()[11] ? this.CGST : (java.lang.Double) defaultValue(fields()[11]);
        record.SGST = fieldSetFlags()[12] ? this.SGST : (java.lang.Double) defaultValue(fields()[12]);
        record.CESS = fieldSetFlags()[13] ? this.CESS : (java.lang.Double) defaultValue(fields()[13]);
        record.DeliveryType = fieldSetFlags()[14] ? this.DeliveryType : (java.lang.String) defaultValue(fields()[14]);
        record.InvoiceLineItems = fieldSetFlags()[15] ? this.InvoiceLineItems : (java.util.List<com.example.InvoiceLineItems>) defaultValue(fields()[15]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Invoices>
    WRITER$ = (org.apache.avro.io.DatumWriter<Invoices>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Invoices>
    READER$ = (org.apache.avro.io.DatumReader<Invoices>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.InvoiceNumber);

    out.writeLong(this.CreatedTime);

    out.writeString(this.StoreID);

    out.writeString(this.PosID);

    out.writeString(this.CashierID);

    out.writeString(this.CustomerType);

    out.writeString(this.CustomerCardNo);

    out.writeDouble(this.TotalAmount);

    out.writeLong(this.NumberOfItems);

    out.writeString(this.PaymentMethod);

    out.writeDouble(this.TaxableAmount);

    out.writeDouble(this.CGST);

    out.writeDouble(this.SGST);

    out.writeDouble(this.CESS);

    out.writeString(this.DeliveryType);

    long size0 = this.InvoiceLineItems.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.example.InvoiceLineItems e0: this.InvoiceLineItems) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.InvoiceNumber = in.readString();

      this.CreatedTime = in.readLong();

      this.StoreID = in.readString();

      this.PosID = in.readString();

      this.CashierID = in.readString();

      this.CustomerType = in.readString();

      this.CustomerCardNo = in.readString();

      this.TotalAmount = in.readDouble();

      this.NumberOfItems = in.readLong();

      this.PaymentMethod = in.readString();

      this.TaxableAmount = in.readDouble();

      this.CGST = in.readDouble();

      this.SGST = in.readDouble();

      this.CESS = in.readDouble();

      this.DeliveryType = in.readString();

      long size0 = in.readArrayStart();
      java.util.List<com.example.InvoiceLineItems> a0 = this.InvoiceLineItems;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.example.InvoiceLineItems>((int)size0, SCHEMA$.getField("InvoiceLineItems").schema());
        this.InvoiceLineItems = a0;
      } else a0.clear();
      SpecificData.Array<com.example.InvoiceLineItems> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.example.InvoiceLineItems>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.example.InvoiceLineItems e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.example.InvoiceLineItems();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 16; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.InvoiceNumber = in.readString();
          break;

        case 1:
          this.CreatedTime = in.readLong();
          break;

        case 2:
          this.StoreID = in.readString();
          break;

        case 3:
          this.PosID = in.readString();
          break;

        case 4:
          this.CashierID = in.readString();
          break;

        case 5:
          this.CustomerType = in.readString();
          break;

        case 6:
          this.CustomerCardNo = in.readString();
          break;

        case 7:
          this.TotalAmount = in.readDouble();
          break;

        case 8:
          this.NumberOfItems = in.readLong();
          break;

        case 9:
          this.PaymentMethod = in.readString();
          break;

        case 10:
          this.TaxableAmount = in.readDouble();
          break;

        case 11:
          this.CGST = in.readDouble();
          break;

        case 12:
          this.SGST = in.readDouble();
          break;

        case 13:
          this.CESS = in.readDouble();
          break;

        case 14:
          this.DeliveryType = in.readString();
          break;

        case 15:
          long size0 = in.readArrayStart();
          java.util.List<com.example.InvoiceLineItems> a0 = this.InvoiceLineItems;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.example.InvoiceLineItems>((int)size0, SCHEMA$.getField("InvoiceLineItems").schema());
            this.InvoiceLineItems = a0;
          } else a0.clear();
          SpecificData.Array<com.example.InvoiceLineItems> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.example.InvoiceLineItems>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.example.InvoiceLineItems e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.example.InvoiceLineItems();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










