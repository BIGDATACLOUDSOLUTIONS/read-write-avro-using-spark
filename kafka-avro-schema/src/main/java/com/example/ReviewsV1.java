/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** This is the first version of Reviews and contains all columns */
@org.apache.avro.specific.AvroGenerated
public class ReviewsV1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1805502508129269508L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ReviewsV1\",\"namespace\":\"com.example\",\"doc\":\"This is the first version of Reviews and contains all columns\",\"fields\":[{\"name\":\"marketplace\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Country code of the marketplace where the review was written.\"},{\"name\":\"customer_id\",\"type\":\"int\",\"doc\":\"Random identifier that can be used to aggregate reviews written by a single author.\"},{\"name\":\"review_id\",\"type\":[\"null\",\"int\"],\"doc\":\"The unique ID of the review.\",\"default\":null},{\"name\":\"product_id\",\"type\":\"int\",\"doc\":\"The unique Product ID\"},{\"name\":\"product_title\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Title of the product.\",\"default\":null},{\"name\":\"category\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Category into which product has been classified\",\"default\":null},{\"name\":\"sub_category\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Subcategory into which product has been kept\",\"default\":null},{\"name\":\"brand\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Brand of the product\",\"default\":null},{\"name\":\"sale_price\",\"type\":[\"null\",\"double\"],\"doc\":\"Price at which product is being sold on the site\",\"default\":null},{\"name\":\"market_price\",\"type\":[\"null\",\"double\"],\"doc\":\"Market price of the product\",\"default\":null},{\"name\":\"product_type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Type into which product falls\",\"default\":null},{\"name\":\"star_rating\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The 1-5 star rating of the review.\",\"default\":null},{\"name\":\"helpful_votes\",\"type\":[\"null\",\"int\"],\"doc\":\"Number of helpful votes.\",\"default\":null},{\"name\":\"total_votes\",\"type\":[\"null\",\"int\"],\"doc\":\"Number of total votes the review received.\",\"default\":null},{\"name\":\"verified_purchase\",\"type\":\"boolean\",\"doc\":\"The review is on a verified purchase.\",\"default\":false},{\"name\":\"review_date\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The date the review was written.\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ReviewsV1> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ReviewsV1> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ReviewsV1> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ReviewsV1> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ReviewsV1> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ReviewsV1 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ReviewsV1 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ReviewsV1 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ReviewsV1 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Country code of the marketplace where the review was written. */
  private java.lang.String marketplace;
  /** Random identifier that can be used to aggregate reviews written by a single author. */
  private int customer_id;
  /** The unique ID of the review. */
  private java.lang.Integer review_id;
  /** The unique Product ID */
  private int product_id;
  /** Title of the product. */
  private java.lang.String product_title;
  /** Category into which product has been classified */
  private java.lang.String category;
  /** Subcategory into which product has been kept */
  private java.lang.String sub_category;
  /** Brand of the product */
  private java.lang.String brand;
  /** Price at which product is being sold on the site */
  private java.lang.Double sale_price;
  /** Market price of the product */
  private java.lang.Double market_price;
  /** Type into which product falls */
  private java.lang.String product_type;
  /** The 1-5 star rating of the review. */
  private java.lang.String star_rating;
  /** Number of helpful votes. */
  private java.lang.Integer helpful_votes;
  /** Number of total votes the review received. */
  private java.lang.Integer total_votes;
  /** The review is on a verified purchase. */
  private boolean verified_purchase;
  /** The date the review was written. */
  private java.lang.String review_date;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ReviewsV1() {}

  /**
   * All-args constructor.
   * @param marketplace Country code of the marketplace where the review was written.
   * @param customer_id Random identifier that can be used to aggregate reviews written by a single author.
   * @param review_id The unique ID of the review.
   * @param product_id The unique Product ID
   * @param product_title Title of the product.
   * @param category Category into which product has been classified
   * @param sub_category Subcategory into which product has been kept
   * @param brand Brand of the product
   * @param sale_price Price at which product is being sold on the site
   * @param market_price Market price of the product
   * @param product_type Type into which product falls
   * @param star_rating The 1-5 star rating of the review.
   * @param helpful_votes Number of helpful votes.
   * @param total_votes Number of total votes the review received.
   * @param verified_purchase The review is on a verified purchase.
   * @param review_date The date the review was written.
   */
  public ReviewsV1(java.lang.String marketplace, java.lang.Integer customer_id, java.lang.Integer review_id, java.lang.Integer product_id, java.lang.String product_title, java.lang.String category, java.lang.String sub_category, java.lang.String brand, java.lang.Double sale_price, java.lang.Double market_price, java.lang.String product_type, java.lang.String star_rating, java.lang.Integer helpful_votes, java.lang.Integer total_votes, java.lang.Boolean verified_purchase, java.lang.String review_date) {
    this.marketplace = marketplace;
    this.customer_id = customer_id;
    this.review_id = review_id;
    this.product_id = product_id;
    this.product_title = product_title;
    this.category = category;
    this.sub_category = sub_category;
    this.brand = brand;
    this.sale_price = sale_price;
    this.market_price = market_price;
    this.product_type = product_type;
    this.star_rating = star_rating;
    this.helpful_votes = helpful_votes;
    this.total_votes = total_votes;
    this.verified_purchase = verified_purchase;
    this.review_date = review_date;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return marketplace;
    case 1: return customer_id;
    case 2: return review_id;
    case 3: return product_id;
    case 4: return product_title;
    case 5: return category;
    case 6: return sub_category;
    case 7: return brand;
    case 8: return sale_price;
    case 9: return market_price;
    case 10: return product_type;
    case 11: return star_rating;
    case 12: return helpful_votes;
    case 13: return total_votes;
    case 14: return verified_purchase;
    case 15: return review_date;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: marketplace = value$ != null ? value$.toString() : null; break;
    case 1: customer_id = (java.lang.Integer)value$; break;
    case 2: review_id = (java.lang.Integer)value$; break;
    case 3: product_id = (java.lang.Integer)value$; break;
    case 4: product_title = value$ != null ? value$.toString() : null; break;
    case 5: category = value$ != null ? value$.toString() : null; break;
    case 6: sub_category = value$ != null ? value$.toString() : null; break;
    case 7: brand = value$ != null ? value$.toString() : null; break;
    case 8: sale_price = (java.lang.Double)value$; break;
    case 9: market_price = (java.lang.Double)value$; break;
    case 10: product_type = value$ != null ? value$.toString() : null; break;
    case 11: star_rating = value$ != null ? value$.toString() : null; break;
    case 12: helpful_votes = (java.lang.Integer)value$; break;
    case 13: total_votes = (java.lang.Integer)value$; break;
    case 14: verified_purchase = (java.lang.Boolean)value$; break;
    case 15: review_date = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'marketplace' field.
   * @return Country code of the marketplace where the review was written.
   */
  public java.lang.String getMarketplace() {
    return marketplace;
  }



  /**
   * Gets the value of the 'customer_id' field.
   * @return Random identifier that can be used to aggregate reviews written by a single author.
   */
  public int getCustomerId() {
    return customer_id;
  }



  /**
   * Gets the value of the 'review_id' field.
   * @return The unique ID of the review.
   */
  public java.lang.Integer getReviewId() {
    return review_id;
  }



  /**
   * Gets the value of the 'product_id' field.
   * @return The unique Product ID
   */
  public int getProductId() {
    return product_id;
  }



  /**
   * Gets the value of the 'product_title' field.
   * @return Title of the product.
   */
  public java.lang.String getProductTitle() {
    return product_title;
  }



  /**
   * Gets the value of the 'category' field.
   * @return Category into which product has been classified
   */
  public java.lang.String getCategory() {
    return category;
  }



  /**
   * Gets the value of the 'sub_category' field.
   * @return Subcategory into which product has been kept
   */
  public java.lang.String getSubCategory() {
    return sub_category;
  }



  /**
   * Gets the value of the 'brand' field.
   * @return Brand of the product
   */
  public java.lang.String getBrand() {
    return brand;
  }



  /**
   * Gets the value of the 'sale_price' field.
   * @return Price at which product is being sold on the site
   */
  public java.lang.Double getSalePrice() {
    return sale_price;
  }



  /**
   * Gets the value of the 'market_price' field.
   * @return Market price of the product
   */
  public java.lang.Double getMarketPrice() {
    return market_price;
  }



  /**
   * Gets the value of the 'product_type' field.
   * @return Type into which product falls
   */
  public java.lang.String getProductType() {
    return product_type;
  }



  /**
   * Gets the value of the 'star_rating' field.
   * @return The 1-5 star rating of the review.
   */
  public java.lang.String getStarRating() {
    return star_rating;
  }



  /**
   * Gets the value of the 'helpful_votes' field.
   * @return Number of helpful votes.
   */
  public java.lang.Integer getHelpfulVotes() {
    return helpful_votes;
  }



  /**
   * Gets the value of the 'total_votes' field.
   * @return Number of total votes the review received.
   */
  public java.lang.Integer getTotalVotes() {
    return total_votes;
  }



  /**
   * Gets the value of the 'verified_purchase' field.
   * @return The review is on a verified purchase.
   */
  public boolean getVerifiedPurchase() {
    return verified_purchase;
  }



  /**
   * Gets the value of the 'review_date' field.
   * @return The date the review was written.
   */
  public java.lang.String getReviewDate() {
    return review_date;
  }



  /**
   * Creates a new ReviewsV1 RecordBuilder.
   * @return A new ReviewsV1 RecordBuilder
   */
  public static com.example.ReviewsV1.Builder newBuilder() {
    return new com.example.ReviewsV1.Builder();
  }

  /**
   * Creates a new ReviewsV1 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ReviewsV1 RecordBuilder
   */
  public static com.example.ReviewsV1.Builder newBuilder(com.example.ReviewsV1.Builder other) {
    if (other == null) {
      return new com.example.ReviewsV1.Builder();
    } else {
      return new com.example.ReviewsV1.Builder(other);
    }
  }

  /**
   * Creates a new ReviewsV1 RecordBuilder by copying an existing ReviewsV1 instance.
   * @param other The existing instance to copy.
   * @return A new ReviewsV1 RecordBuilder
   */
  public static com.example.ReviewsV1.Builder newBuilder(com.example.ReviewsV1 other) {
    if (other == null) {
      return new com.example.ReviewsV1.Builder();
    } else {
      return new com.example.ReviewsV1.Builder(other);
    }
  }

  /**
   * RecordBuilder for ReviewsV1 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ReviewsV1>
    implements org.apache.avro.data.RecordBuilder<ReviewsV1> {

    /** Country code of the marketplace where the review was written. */
    private java.lang.String marketplace;
    /** Random identifier that can be used to aggregate reviews written by a single author. */
    private int customer_id;
    /** The unique ID of the review. */
    private java.lang.Integer review_id;
    /** The unique Product ID */
    private int product_id;
    /** Title of the product. */
    private java.lang.String product_title;
    /** Category into which product has been classified */
    private java.lang.String category;
    /** Subcategory into which product has been kept */
    private java.lang.String sub_category;
    /** Brand of the product */
    private java.lang.String brand;
    /** Price at which product is being sold on the site */
    private java.lang.Double sale_price;
    /** Market price of the product */
    private java.lang.Double market_price;
    /** Type into which product falls */
    private java.lang.String product_type;
    /** The 1-5 star rating of the review. */
    private java.lang.String star_rating;
    /** Number of helpful votes. */
    private java.lang.Integer helpful_votes;
    /** Number of total votes the review received. */
    private java.lang.Integer total_votes;
    /** The review is on a verified purchase. */
    private boolean verified_purchase;
    /** The date the review was written. */
    private java.lang.String review_date;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.ReviewsV1.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.marketplace)) {
        this.marketplace = data().deepCopy(fields()[0].schema(), other.marketplace);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.customer_id)) {
        this.customer_id = data().deepCopy(fields()[1].schema(), other.customer_id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.review_id)) {
        this.review_id = data().deepCopy(fields()[2].schema(), other.review_id);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.product_id)) {
        this.product_id = data().deepCopy(fields()[3].schema(), other.product_id);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.product_title)) {
        this.product_title = data().deepCopy(fields()[4].schema(), other.product_title);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.category)) {
        this.category = data().deepCopy(fields()[5].schema(), other.category);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.sub_category)) {
        this.sub_category = data().deepCopy(fields()[6].schema(), other.sub_category);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.brand)) {
        this.brand = data().deepCopy(fields()[7].schema(), other.brand);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.sale_price)) {
        this.sale_price = data().deepCopy(fields()[8].schema(), other.sale_price);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.market_price)) {
        this.market_price = data().deepCopy(fields()[9].schema(), other.market_price);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.product_type)) {
        this.product_type = data().deepCopy(fields()[10].schema(), other.product_type);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.star_rating)) {
        this.star_rating = data().deepCopy(fields()[11].schema(), other.star_rating);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.helpful_votes)) {
        this.helpful_votes = data().deepCopy(fields()[12].schema(), other.helpful_votes);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.total_votes)) {
        this.total_votes = data().deepCopy(fields()[13].schema(), other.total_votes);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.verified_purchase)) {
        this.verified_purchase = data().deepCopy(fields()[14].schema(), other.verified_purchase);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.review_date)) {
        this.review_date = data().deepCopy(fields()[15].schema(), other.review_date);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
    }

    /**
     * Creates a Builder by copying an existing ReviewsV1 instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.ReviewsV1 other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.marketplace)) {
        this.marketplace = data().deepCopy(fields()[0].schema(), other.marketplace);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customer_id)) {
        this.customer_id = data().deepCopy(fields()[1].schema(), other.customer_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.review_id)) {
        this.review_id = data().deepCopy(fields()[2].schema(), other.review_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.product_id)) {
        this.product_id = data().deepCopy(fields()[3].schema(), other.product_id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.product_title)) {
        this.product_title = data().deepCopy(fields()[4].schema(), other.product_title);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.category)) {
        this.category = data().deepCopy(fields()[5].schema(), other.category);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sub_category)) {
        this.sub_category = data().deepCopy(fields()[6].schema(), other.sub_category);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.brand)) {
        this.brand = data().deepCopy(fields()[7].schema(), other.brand);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.sale_price)) {
        this.sale_price = data().deepCopy(fields()[8].schema(), other.sale_price);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.market_price)) {
        this.market_price = data().deepCopy(fields()[9].schema(), other.market_price);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.product_type)) {
        this.product_type = data().deepCopy(fields()[10].schema(), other.product_type);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.star_rating)) {
        this.star_rating = data().deepCopy(fields()[11].schema(), other.star_rating);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.helpful_votes)) {
        this.helpful_votes = data().deepCopy(fields()[12].schema(), other.helpful_votes);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.total_votes)) {
        this.total_votes = data().deepCopy(fields()[13].schema(), other.total_votes);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.verified_purchase)) {
        this.verified_purchase = data().deepCopy(fields()[14].schema(), other.verified_purchase);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.review_date)) {
        this.review_date = data().deepCopy(fields()[15].schema(), other.review_date);
        fieldSetFlags()[15] = true;
      }
    }

    /**
      * Gets the value of the 'marketplace' field.
      * Country code of the marketplace where the review was written.
      * @return The value.
      */
    public java.lang.String getMarketplace() {
      return marketplace;
    }


    /**
      * Sets the value of the 'marketplace' field.
      * Country code of the marketplace where the review was written.
      * @param value The value of 'marketplace'.
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder setMarketplace(java.lang.String value) {
      validate(fields()[0], value);
      this.marketplace = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'marketplace' field has been set.
      * Country code of the marketplace where the review was written.
      * @return True if the 'marketplace' field has been set, false otherwise.
      */
    public boolean hasMarketplace() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'marketplace' field.
      * Country code of the marketplace where the review was written.
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder clearMarketplace() {
      marketplace = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'customer_id' field.
      * Random identifier that can be used to aggregate reviews written by a single author.
      * @return The value.
      */
    public int getCustomerId() {
      return customer_id;
    }


    /**
      * Sets the value of the 'customer_id' field.
      * Random identifier that can be used to aggregate reviews written by a single author.
      * @param value The value of 'customer_id'.
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder setCustomerId(int value) {
      validate(fields()[1], value);
      this.customer_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'customer_id' field has been set.
      * Random identifier that can be used to aggregate reviews written by a single author.
      * @return True if the 'customer_id' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'customer_id' field.
      * Random identifier that can be used to aggregate reviews written by a single author.
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder clearCustomerId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'review_id' field.
      * The unique ID of the review.
      * @return The value.
      */
    public java.lang.Integer getReviewId() {
      return review_id;
    }


    /**
      * Sets the value of the 'review_id' field.
      * The unique ID of the review.
      * @param value The value of 'review_id'.
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder setReviewId(java.lang.Integer value) {
      validate(fields()[2], value);
      this.review_id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'review_id' field has been set.
      * The unique ID of the review.
      * @return True if the 'review_id' field has been set, false otherwise.
      */
    public boolean hasReviewId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'review_id' field.
      * The unique ID of the review.
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder clearReviewId() {
      review_id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'product_id' field.
      * The unique Product ID
      * @return The value.
      */
    public int getProductId() {
      return product_id;
    }


    /**
      * Sets the value of the 'product_id' field.
      * The unique Product ID
      * @param value The value of 'product_id'.
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder setProductId(int value) {
      validate(fields()[3], value);
      this.product_id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'product_id' field has been set.
      * The unique Product ID
      * @return True if the 'product_id' field has been set, false otherwise.
      */
    public boolean hasProductId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'product_id' field.
      * The unique Product ID
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder clearProductId() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'product_title' field.
      * Title of the product.
      * @return The value.
      */
    public java.lang.String getProductTitle() {
      return product_title;
    }


    /**
      * Sets the value of the 'product_title' field.
      * Title of the product.
      * @param value The value of 'product_title'.
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder setProductTitle(java.lang.String value) {
      validate(fields()[4], value);
      this.product_title = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'product_title' field has been set.
      * Title of the product.
      * @return True if the 'product_title' field has been set, false otherwise.
      */
    public boolean hasProductTitle() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'product_title' field.
      * Title of the product.
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder clearProductTitle() {
      product_title = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'category' field.
      * Category into which product has been classified
      * @return The value.
      */
    public java.lang.String getCategory() {
      return category;
    }


    /**
      * Sets the value of the 'category' field.
      * Category into which product has been classified
      * @param value The value of 'category'.
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder setCategory(java.lang.String value) {
      validate(fields()[5], value);
      this.category = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'category' field has been set.
      * Category into which product has been classified
      * @return True if the 'category' field has been set, false otherwise.
      */
    public boolean hasCategory() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'category' field.
      * Category into which product has been classified
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder clearCategory() {
      category = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'sub_category' field.
      * Subcategory into which product has been kept
      * @return The value.
      */
    public java.lang.String getSubCategory() {
      return sub_category;
    }


    /**
      * Sets the value of the 'sub_category' field.
      * Subcategory into which product has been kept
      * @param value The value of 'sub_category'.
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder setSubCategory(java.lang.String value) {
      validate(fields()[6], value);
      this.sub_category = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'sub_category' field has been set.
      * Subcategory into which product has been kept
      * @return True if the 'sub_category' field has been set, false otherwise.
      */
    public boolean hasSubCategory() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'sub_category' field.
      * Subcategory into which product has been kept
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder clearSubCategory() {
      sub_category = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'brand' field.
      * Brand of the product
      * @return The value.
      */
    public java.lang.String getBrand() {
      return brand;
    }


    /**
      * Sets the value of the 'brand' field.
      * Brand of the product
      * @param value The value of 'brand'.
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder setBrand(java.lang.String value) {
      validate(fields()[7], value);
      this.brand = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'brand' field has been set.
      * Brand of the product
      * @return True if the 'brand' field has been set, false otherwise.
      */
    public boolean hasBrand() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'brand' field.
      * Brand of the product
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder clearBrand() {
      brand = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'sale_price' field.
      * Price at which product is being sold on the site
      * @return The value.
      */
    public java.lang.Double getSalePrice() {
      return sale_price;
    }


    /**
      * Sets the value of the 'sale_price' field.
      * Price at which product is being sold on the site
      * @param value The value of 'sale_price'.
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder setSalePrice(java.lang.Double value) {
      validate(fields()[8], value);
      this.sale_price = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'sale_price' field has been set.
      * Price at which product is being sold on the site
      * @return True if the 'sale_price' field has been set, false otherwise.
      */
    public boolean hasSalePrice() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'sale_price' field.
      * Price at which product is being sold on the site
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder clearSalePrice() {
      sale_price = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'market_price' field.
      * Market price of the product
      * @return The value.
      */
    public java.lang.Double getMarketPrice() {
      return market_price;
    }


    /**
      * Sets the value of the 'market_price' field.
      * Market price of the product
      * @param value The value of 'market_price'.
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder setMarketPrice(java.lang.Double value) {
      validate(fields()[9], value);
      this.market_price = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'market_price' field has been set.
      * Market price of the product
      * @return True if the 'market_price' field has been set, false otherwise.
      */
    public boolean hasMarketPrice() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'market_price' field.
      * Market price of the product
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder clearMarketPrice() {
      market_price = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'product_type' field.
      * Type into which product falls
      * @return The value.
      */
    public java.lang.String getProductType() {
      return product_type;
    }


    /**
      * Sets the value of the 'product_type' field.
      * Type into which product falls
      * @param value The value of 'product_type'.
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder setProductType(java.lang.String value) {
      validate(fields()[10], value);
      this.product_type = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'product_type' field has been set.
      * Type into which product falls
      * @return True if the 'product_type' field has been set, false otherwise.
      */
    public boolean hasProductType() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'product_type' field.
      * Type into which product falls
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder clearProductType() {
      product_type = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'star_rating' field.
      * The 1-5 star rating of the review.
      * @return The value.
      */
    public java.lang.String getStarRating() {
      return star_rating;
    }


    /**
      * Sets the value of the 'star_rating' field.
      * The 1-5 star rating of the review.
      * @param value The value of 'star_rating'.
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder setStarRating(java.lang.String value) {
      validate(fields()[11], value);
      this.star_rating = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'star_rating' field has been set.
      * The 1-5 star rating of the review.
      * @return True if the 'star_rating' field has been set, false otherwise.
      */
    public boolean hasStarRating() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'star_rating' field.
      * The 1-5 star rating of the review.
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder clearStarRating() {
      star_rating = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'helpful_votes' field.
      * Number of helpful votes.
      * @return The value.
      */
    public java.lang.Integer getHelpfulVotes() {
      return helpful_votes;
    }


    /**
      * Sets the value of the 'helpful_votes' field.
      * Number of helpful votes.
      * @param value The value of 'helpful_votes'.
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder setHelpfulVotes(java.lang.Integer value) {
      validate(fields()[12], value);
      this.helpful_votes = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'helpful_votes' field has been set.
      * Number of helpful votes.
      * @return True if the 'helpful_votes' field has been set, false otherwise.
      */
    public boolean hasHelpfulVotes() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'helpful_votes' field.
      * Number of helpful votes.
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder clearHelpfulVotes() {
      helpful_votes = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'total_votes' field.
      * Number of total votes the review received.
      * @return The value.
      */
    public java.lang.Integer getTotalVotes() {
      return total_votes;
    }


    /**
      * Sets the value of the 'total_votes' field.
      * Number of total votes the review received.
      * @param value The value of 'total_votes'.
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder setTotalVotes(java.lang.Integer value) {
      validate(fields()[13], value);
      this.total_votes = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'total_votes' field has been set.
      * Number of total votes the review received.
      * @return True if the 'total_votes' field has been set, false otherwise.
      */
    public boolean hasTotalVotes() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'total_votes' field.
      * Number of total votes the review received.
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder clearTotalVotes() {
      total_votes = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'verified_purchase' field.
      * The review is on a verified purchase.
      * @return The value.
      */
    public boolean getVerifiedPurchase() {
      return verified_purchase;
    }


    /**
      * Sets the value of the 'verified_purchase' field.
      * The review is on a verified purchase.
      * @param value The value of 'verified_purchase'.
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder setVerifiedPurchase(boolean value) {
      validate(fields()[14], value);
      this.verified_purchase = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'verified_purchase' field has been set.
      * The review is on a verified purchase.
      * @return True if the 'verified_purchase' field has been set, false otherwise.
      */
    public boolean hasVerifiedPurchase() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'verified_purchase' field.
      * The review is on a verified purchase.
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder clearVerifiedPurchase() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'review_date' field.
      * The date the review was written.
      * @return The value.
      */
    public java.lang.String getReviewDate() {
      return review_date;
    }


    /**
      * Sets the value of the 'review_date' field.
      * The date the review was written.
      * @param value The value of 'review_date'.
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder setReviewDate(java.lang.String value) {
      validate(fields()[15], value);
      this.review_date = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'review_date' field has been set.
      * The date the review was written.
      * @return True if the 'review_date' field has been set, false otherwise.
      */
    public boolean hasReviewDate() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'review_date' field.
      * The date the review was written.
      * @return This builder.
      */
    public com.example.ReviewsV1.Builder clearReviewDate() {
      review_date = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ReviewsV1 build() {
      try {
        ReviewsV1 record = new ReviewsV1();
        record.marketplace = fieldSetFlags()[0] ? this.marketplace : (java.lang.String) defaultValue(fields()[0]);
        record.customer_id = fieldSetFlags()[1] ? this.customer_id : (java.lang.Integer) defaultValue(fields()[1]);
        record.review_id = fieldSetFlags()[2] ? this.review_id : (java.lang.Integer) defaultValue(fields()[2]);
        record.product_id = fieldSetFlags()[3] ? this.product_id : (java.lang.Integer) defaultValue(fields()[3]);
        record.product_title = fieldSetFlags()[4] ? this.product_title : (java.lang.String) defaultValue(fields()[4]);
        record.category = fieldSetFlags()[5] ? this.category : (java.lang.String) defaultValue(fields()[5]);
        record.sub_category = fieldSetFlags()[6] ? this.sub_category : (java.lang.String) defaultValue(fields()[6]);
        record.brand = fieldSetFlags()[7] ? this.brand : (java.lang.String) defaultValue(fields()[7]);
        record.sale_price = fieldSetFlags()[8] ? this.sale_price : (java.lang.Double) defaultValue(fields()[8]);
        record.market_price = fieldSetFlags()[9] ? this.market_price : (java.lang.Double) defaultValue(fields()[9]);
        record.product_type = fieldSetFlags()[10] ? this.product_type : (java.lang.String) defaultValue(fields()[10]);
        record.star_rating = fieldSetFlags()[11] ? this.star_rating : (java.lang.String) defaultValue(fields()[11]);
        record.helpful_votes = fieldSetFlags()[12] ? this.helpful_votes : (java.lang.Integer) defaultValue(fields()[12]);
        record.total_votes = fieldSetFlags()[13] ? this.total_votes : (java.lang.Integer) defaultValue(fields()[13]);
        record.verified_purchase = fieldSetFlags()[14] ? this.verified_purchase : (java.lang.Boolean) defaultValue(fields()[14]);
        record.review_date = fieldSetFlags()[15] ? this.review_date : (java.lang.String) defaultValue(fields()[15]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ReviewsV1>
    WRITER$ = (org.apache.avro.io.DatumWriter<ReviewsV1>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ReviewsV1>
    READER$ = (org.apache.avro.io.DatumReader<ReviewsV1>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.marketplace);

    out.writeInt(this.customer_id);

    if (this.review_id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.review_id);
    }

    out.writeInt(this.product_id);

    if (this.product_title == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.product_title);
    }

    if (this.category == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.category);
    }

    if (this.sub_category == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.sub_category);
    }

    if (this.brand == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.brand);
    }

    if (this.sale_price == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.sale_price);
    }

    if (this.market_price == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.market_price);
    }

    if (this.product_type == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.product_type);
    }

    if (this.star_rating == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.star_rating);
    }

    if (this.helpful_votes == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.helpful_votes);
    }

    if (this.total_votes == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.total_votes);
    }

    out.writeBoolean(this.verified_purchase);

    out.writeString(this.review_date);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.marketplace = in.readString();

      this.customer_id = in.readInt();

      if (in.readIndex() != 1) {
        in.readNull();
        this.review_id = null;
      } else {
        this.review_id = in.readInt();
      }

      this.product_id = in.readInt();

      if (in.readIndex() != 1) {
        in.readNull();
        this.product_title = null;
      } else {
        this.product_title = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.category = null;
      } else {
        this.category = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sub_category = null;
      } else {
        this.sub_category = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.brand = null;
      } else {
        this.brand = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sale_price = null;
      } else {
        this.sale_price = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.market_price = null;
      } else {
        this.market_price = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.product_type = null;
      } else {
        this.product_type = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.star_rating = null;
      } else {
        this.star_rating = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.helpful_votes = null;
      } else {
        this.helpful_votes = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.total_votes = null;
      } else {
        this.total_votes = in.readInt();
      }

      this.verified_purchase = in.readBoolean();

      this.review_date = in.readString();

    } else {
      for (int i = 0; i < 16; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.marketplace = in.readString();
          break;

        case 1:
          this.customer_id = in.readInt();
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.review_id = null;
          } else {
            this.review_id = in.readInt();
          }
          break;

        case 3:
          this.product_id = in.readInt();
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.product_title = null;
          } else {
            this.product_title = in.readString();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.category = null;
          } else {
            this.category = in.readString();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sub_category = null;
          } else {
            this.sub_category = in.readString();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.brand = null;
          } else {
            this.brand = in.readString();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sale_price = null;
          } else {
            this.sale_price = in.readDouble();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.market_price = null;
          } else {
            this.market_price = in.readDouble();
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.product_type = null;
          } else {
            this.product_type = in.readString();
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.star_rating = null;
          } else {
            this.star_rating = in.readString();
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.helpful_votes = null;
          } else {
            this.helpful_votes = in.readInt();
          }
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.total_votes = null;
          } else {
            this.total_votes = in.readInt();
          }
          break;

        case 14:
          this.verified_purchase = in.readBoolean();
          break;

        case 15:
          this.review_date = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










